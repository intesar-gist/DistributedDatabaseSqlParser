/* SqlParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. SqlParserTokenManager.java */
package sqlParser;
import java.util.ArrayList;
import java.util.HashMap;

/** Token Manager. */
@SuppressWarnings("unused")public class SqlParserTokenManager implements SqlParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000L) != 0L)
            return 0;
         if ((active0 & 0x3fffffff800000L) != 0L)
         {
            jjmatchedKind = 54;
            return 16;
         }
         return -1;
      case 1:
         if ((active0 & 0x8063c02000000L) != 0L)
            return 16;
         if ((active0 & 0x37f9c3fd800000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 1;
            }
            return 16;
         }
         return -1;
      case 2:
         if ((active0 & 0x3ffd5bfc000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
            return 16;
         }
         if ((active0 & 0x8001800000L) != 0L)
            return 16;
         return -1;
      case 3:
         if ((active0 & 0x150d0000000L) != 0L)
            return 16;
         if ((active0 & 0x3ffc0b2c000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
            return 16;
         }
         return -1;
      case 4:
         if ((active0 & 0x840100000000L) != 0L)
            return 16;
         if ((active0 & 0x3f780a2c000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
            return 16;
         }
         return -1;
      case 5:
         if ((active0 & 0x2780a08000000L) != 0L)
            return 16;
         if ((active0 & 0x3d000024000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 5;
            }
            return 16;
         }
         return -1;
      case 6:
         if ((active0 & 0x18000004000000L) != 0L)
            return 16;
         if ((active0 & 0x25000020000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 6;
            return 16;
         }
         return -1;
      case 7:
         if ((active0 & 0x20000000L) != 0L)
            return 16;
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x21000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 7;
            return 16;
         }
         return -1;
      case 8:
         if ((active0 & 0x21000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 8;
            return 16;
         }
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x21000000000000L) != 0L)
            return 16;
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 37:
         return jjStopAtPos(0, 12);
      case 40:
         return jjStopAtPos(0, 10);
      case 41:
         return jjStopAtPos(0, 9);
      case 42:
         return jjStopAtPos(0, 8);
      case 44:
         return jjStopAtPos(0, 11);
      case 45:
         return jjStartNfaWithStates_0(0, 18, 0);
      case 60:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0xa0000L);
      case 61:
         return jjStopAtPos(0, 13);
      case 62:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1800000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x300000c000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x70000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x20000200000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8003c00000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x18000000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x60000000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x300000000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x10400000000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 62:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400200000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x80010000000L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020000000L);
      case 78:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8101800800000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x21008004000000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 82:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x60401c8000000L);
      case 83:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 16);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 89:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 67:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 16);
         break;
      case 68:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 16);
         return jjMoveStringLiteralDfa3_0(active0, 0x240000000000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800008000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x4100000000000L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x490000000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000004000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c0000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x830000000L);
      case 84:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 16);
         return jjMoveStringLiteralDfa3_0(active0, 0x8001000000000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200008000000L);
      case 67:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 16);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
      case 69:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 16);
         return jjMoveStringLiteralDfa4_0(active0, 0x80c0800000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000200000000L);
      case 76:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 16);
         break;
      case 77:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 16);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 79:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 16);
         break;
      case 80:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 16);
         break;
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x400100000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 69:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 16);
         return jjMoveStringLiteralDfa5_0(active0, 0x400004000000L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 80:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 16);
         break;
      case 82:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 16);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x3200008000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 90:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 69:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 16);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 16);
         return jjMoveStringLiteralDfa6_0(active0, 0xa000000000000L);
      case 71:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 16);
         break;
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x5000000000000L);
      case 83:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 16);
         break;
      case 84:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 16);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L);
      case 82:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 16);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 16);
         break;
      case 84:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 16);
         break;
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      case 84:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 16);
         return jjMoveStringLiteralDfa8_0(active0, 0x22000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x22000000000000L);
      case 75:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L);
      case 76:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 53, 16);
         break;
      case 84:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 48, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L);
      case 89:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(10, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(11, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAdd(13); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 16:
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(15); }
                  break;
               case 0:
                  if (curChar == 45)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 8:
                  if (curChar == 42)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 9:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(10, 8); }
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(10, 8); }
                  break;
               case 11:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 12:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAdd(13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 14:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(15); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAddTwoStates(14, 15); }
                  }
                  break;
               case 1:
                  { jjAddStates(0, 2); }
                  break;
               case 7:
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
               case 10:
                  { jjCheckNAddTwoStates(10, 8); }
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(15); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(0, 2); }
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(10, 8); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 8, 9, 11, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\52", "\51", "\50", "\54", 
"\45", "\75", "\76", "\76\75", "\74", "\74\75", "\55", "\74\76", "\41\75", null, null, 
"\101\116\104", "\101\123\103", "\102\131", "\103\117\116\116\105\103\124", 
"\103\122\105\101\124\105", "\104\105\123\103", "\104\111\123\124\111\116\103\124", "\104\122\117\120", 
"\106\122\117\115", "\107\122\117\125\120", "\110\101\126\111\116\107", "\111\116", 
"\111\116\123\105\122\124", "\111\116\124\117", "\111\123", "\114\111\113\105", "\116\117\124", 
"\116\125\114\114", "\117\122", "\117\122\104\105\122", "\123\105\114\105\103\124", 
"\125\116\111\121\125\105", "\125\120\104\101\124\105", "\126\101\114\125\105\123", 
"\127\110\105\122\105", "\103\117\116\123\124\122\101\111\116\124", 
"\103\122\105\101\124\105\40\124\101\102\114\105", "\120\122\111\115\101\122\131\40\113\105\131", "\111\116\124\105\107\105\122", 
"\126\101\122\103\110\101\122", "\110\117\122\111\132\117\116\124\101\114", null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SqlParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public SqlParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 16; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffbfff01L, 
};
static final long[] jjtoSkip = {
   0xfeL, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[16];
    private final int[] jjstateSet = new int[2 * 16];

    
    protected char curChar;
}
